// Code generated by MockGen. DO NOT EDIT.
// Source: metadata.go
//
// Generated by this command:
//
//	mockgen -source metadata.go -destination ./mocks/metadata.go
//

// Package mock_metadata is a generated GoMock package.
package mock_metadata

import (
	reflect "reflect"
	unsafe "unsafe"

	jwriter "github.com/launchdarkly/go-jsonstream/v3/jwriter"
	memutils "github.com/vkngwrapper/arsenal/memutils"
	metadata "github.com/vkngwrapper/arsenal/memutils/metadata"
	gomock "go.uber.org/mock/gomock"
)

// MockBlockMetadata is a mock of BlockMetadata interface.
type MockBlockMetadata struct {
	ctrl     *gomock.Controller
	recorder *MockBlockMetadataMockRecorder
	isgomock struct{}
}

// MockBlockMetadataMockRecorder is the mock recorder for MockBlockMetadata.
type MockBlockMetadataMockRecorder struct {
	mock *MockBlockMetadata
}

// NewMockBlockMetadata creates a new mock instance.
func NewMockBlockMetadata(ctrl *gomock.Controller) *MockBlockMetadata {
	mock := &MockBlockMetadata{ctrl: ctrl}
	mock.recorder = &MockBlockMetadataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockMetadata) EXPECT() *MockBlockMetadataMockRecorder {
	return m.recorder
}

// AddDetailedStatistics mocks base method.
func (m *MockBlockMetadata) AddDetailedStatistics(stats *memutils.DetailedStatistics) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddDetailedStatistics", stats)
}

// AddDetailedStatistics indicates an expected call of AddDetailedStatistics.
func (mr *MockBlockMetadataMockRecorder) AddDetailedStatistics(stats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDetailedStatistics", reflect.TypeOf((*MockBlockMetadata)(nil).AddDetailedStatistics), stats)
}

// AddStatistics mocks base method.
func (m *MockBlockMetadata) AddStatistics(stats *memutils.Statistics) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddStatistics", stats)
}

// AddStatistics indicates an expected call of AddStatistics.
func (mr *MockBlockMetadataMockRecorder) AddStatistics(stats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStatistics", reflect.TypeOf((*MockBlockMetadata)(nil).AddStatistics), stats)
}

// Alloc mocks base method.
func (m *MockBlockMetadata) Alloc(request metadata.AllocationRequest, allocType uint32, userData any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alloc", request, allocType, userData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Alloc indicates an expected call of Alloc.
func (mr *MockBlockMetadataMockRecorder) Alloc(request, allocType, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alloc", reflect.TypeOf((*MockBlockMetadata)(nil).Alloc), request, allocType, userData)
}

// AllocationCount mocks base method.
func (m *MockBlockMetadata) AllocationCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocationCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// AllocationCount indicates an expected call of AllocationCount.
func (mr *MockBlockMetadataMockRecorder) AllocationCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocationCount", reflect.TypeOf((*MockBlockMetadata)(nil).AllocationCount))
}

// AllocationListBegin mocks base method.
func (m *MockBlockMetadata) AllocationListBegin() (metadata.BlockAllocationHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocationListBegin")
	ret0, _ := ret[0].(metadata.BlockAllocationHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocationListBegin indicates an expected call of AllocationListBegin.
func (mr *MockBlockMetadataMockRecorder) AllocationListBegin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocationListBegin", reflect.TypeOf((*MockBlockMetadata)(nil).AllocationListBegin))
}

// AllocationOffset mocks base method.
func (m *MockBlockMetadata) AllocationOffset(allocHandle metadata.BlockAllocationHandle) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocationOffset", allocHandle)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocationOffset indicates an expected call of AllocationOffset.
func (mr *MockBlockMetadataMockRecorder) AllocationOffset(allocHandle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocationOffset", reflect.TypeOf((*MockBlockMetadata)(nil).AllocationOffset), allocHandle)
}

// AllocationUserData mocks base method.
func (m *MockBlockMetadata) AllocationUserData(allocHandle metadata.BlockAllocationHandle) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocationUserData", allocHandle)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocationUserData indicates an expected call of AllocationUserData.
func (mr *MockBlockMetadataMockRecorder) AllocationUserData(allocHandle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocationUserData", reflect.TypeOf((*MockBlockMetadata)(nil).AllocationUserData), allocHandle)
}

// BlockJsonData mocks base method.
func (m *MockBlockMetadata) BlockJsonData(json jwriter.ObjectState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BlockJsonData", json)
}

// BlockJsonData indicates an expected call of BlockJsonData.
func (mr *MockBlockMetadataMockRecorder) BlockJsonData(json any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockJsonData", reflect.TypeOf((*MockBlockMetadata)(nil).BlockJsonData), json)
}

// CheckCorruption mocks base method.
func (m *MockBlockMetadata) CheckCorruption(blockData unsafe.Pointer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCorruption", blockData)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckCorruption indicates an expected call of CheckCorruption.
func (mr *MockBlockMetadataMockRecorder) CheckCorruption(blockData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCorruption", reflect.TypeOf((*MockBlockMetadata)(nil).CheckCorruption), blockData)
}

// Clear mocks base method.
func (m *MockBlockMetadata) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockBlockMetadataMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockBlockMetadata)(nil).Clear))
}

// CreateAllocationRequest mocks base method.
func (m *MockBlockMetadata) CreateAllocationRequest(allocSize int, allocAlignment uint, upperAddress bool, allocType uint32, strategy metadata.AllocationStrategy, maxOffset int) (bool, metadata.AllocationRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAllocationRequest", allocSize, allocAlignment, upperAddress, allocType, strategy, maxOffset)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(metadata.AllocationRequest)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateAllocationRequest indicates an expected call of CreateAllocationRequest.
func (mr *MockBlockMetadataMockRecorder) CreateAllocationRequest(allocSize, allocAlignment, upperAddress, allocType, strategy, maxOffset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAllocationRequest", reflect.TypeOf((*MockBlockMetadata)(nil).CreateAllocationRequest), allocSize, allocAlignment, upperAddress, allocType, strategy, maxOffset)
}

// FindNextAllocation mocks base method.
func (m *MockBlockMetadata) FindNextAllocation(allocHandle metadata.BlockAllocationHandle) (metadata.BlockAllocationHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNextAllocation", allocHandle)
	ret0, _ := ret[0].(metadata.BlockAllocationHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNextAllocation indicates an expected call of FindNextAllocation.
func (mr *MockBlockMetadataMockRecorder) FindNextAllocation(allocHandle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNextAllocation", reflect.TypeOf((*MockBlockMetadata)(nil).FindNextAllocation), allocHandle)
}

// Free mocks base method.
func (m *MockBlockMetadata) Free(allocHandle metadata.BlockAllocationHandle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Free", allocHandle)
	ret0, _ := ret[0].(error)
	return ret0
}

// Free indicates an expected call of Free.
func (mr *MockBlockMetadataMockRecorder) Free(allocHandle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockBlockMetadata)(nil).Free), allocHandle)
}

// FreeRegionsCount mocks base method.
func (m *MockBlockMetadata) FreeRegionsCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreeRegionsCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// FreeRegionsCount indicates an expected call of FreeRegionsCount.
func (mr *MockBlockMetadataMockRecorder) FreeRegionsCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeRegionsCount", reflect.TypeOf((*MockBlockMetadata)(nil).FreeRegionsCount))
}

// Init mocks base method.
func (m *MockBlockMetadata) Init(size int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", size)
}

// Init indicates an expected call of Init.
func (mr *MockBlockMetadataMockRecorder) Init(size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockBlockMetadata)(nil).Init), size)
}

// IsEmpty mocks base method.
func (m *MockBlockMetadata) IsEmpty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty.
func (mr *MockBlockMetadataMockRecorder) IsEmpty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockBlockMetadata)(nil).IsEmpty))
}

// MayHaveFreeBlock mocks base method.
func (m *MockBlockMetadata) MayHaveFreeBlock(allocType uint32, size int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MayHaveFreeBlock", allocType, size)
	ret0, _ := ret[0].(bool)
	return ret0
}

// MayHaveFreeBlock indicates an expected call of MayHaveFreeBlock.
func (mr *MockBlockMetadataMockRecorder) MayHaveFreeBlock(allocType, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MayHaveFreeBlock", reflect.TypeOf((*MockBlockMetadata)(nil).MayHaveFreeBlock), allocType, size)
}

// SetAllocationUserData mocks base method.
func (m *MockBlockMetadata) SetAllocationUserData(allocHandle metadata.BlockAllocationHandle, userData any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAllocationUserData", allocHandle, userData)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAllocationUserData indicates an expected call of SetAllocationUserData.
func (mr *MockBlockMetadataMockRecorder) SetAllocationUserData(allocHandle, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAllocationUserData", reflect.TypeOf((*MockBlockMetadata)(nil).SetAllocationUserData), allocHandle, userData)
}

// Size mocks base method.
func (m *MockBlockMetadata) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockBlockMetadataMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockBlockMetadata)(nil).Size))
}

// SumFreeSize mocks base method.
func (m *MockBlockMetadata) SumFreeSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumFreeSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// SumFreeSize indicates an expected call of SumFreeSize.
func (mr *MockBlockMetadataMockRecorder) SumFreeSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumFreeSize", reflect.TypeOf((*MockBlockMetadata)(nil).SumFreeSize))
}

// SupportsRandomAccess mocks base method.
func (m *MockBlockMetadata) SupportsRandomAccess() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsRandomAccess")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsRandomAccess indicates an expected call of SupportsRandomAccess.
func (mr *MockBlockMetadataMockRecorder) SupportsRandomAccess() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsRandomAccess", reflect.TypeOf((*MockBlockMetadata)(nil).SupportsRandomAccess))
}

// Validate mocks base method.
func (m *MockBlockMetadata) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockBlockMetadataMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockBlockMetadata)(nil).Validate))
}

// VisitAllRegions mocks base method.
func (m *MockBlockMetadata) VisitAllRegions(handleBlock func(metadata.BlockAllocationHandle, int, int, any, bool) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VisitAllRegions", handleBlock)
	ret0, _ := ret[0].(error)
	return ret0
}

// VisitAllRegions indicates an expected call of VisitAllRegions.
func (mr *MockBlockMetadataMockRecorder) VisitAllRegions(handleBlock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VisitAllRegions", reflect.TypeOf((*MockBlockMetadata)(nil).VisitAllRegions), handleBlock)
}
