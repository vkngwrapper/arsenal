// Code generated by MockGen. DO NOT EDIT.
// Source: granularity.go
//
// Generated by this command:
//
//	mockgen -source granularity.go -destination ./mocks/granularity.go
//

// Package mock_metadata is a generated GoMock package.
package mock_metadata

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGranularityCheck is a mock of GranularityCheck interface.
type MockGranularityCheck struct {
	ctrl     *gomock.Controller
	recorder *MockGranularityCheckMockRecorder
	isgomock struct{}
}

// MockGranularityCheckMockRecorder is the mock recorder for MockGranularityCheck.
type MockGranularityCheckMockRecorder struct {
	mock *MockGranularityCheck
}

// NewMockGranularityCheck creates a new mock instance.
func NewMockGranularityCheck(ctrl *gomock.Controller) *MockGranularityCheck {
	mock := &MockGranularityCheck{ctrl: ctrl}
	mock.recorder = &MockGranularityCheckMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGranularityCheck) EXPECT() *MockGranularityCheckMockRecorder {
	return m.recorder
}

// AllocRegions mocks base method.
func (m *MockGranularityCheck) AllocRegions(allocType uint32, offset, size int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AllocRegions", allocType, offset, size)
}

// AllocRegions indicates an expected call of AllocRegions.
func (mr *MockGranularityCheckMockRecorder) AllocRegions(allocType, offset, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocRegions", reflect.TypeOf((*MockGranularityCheck)(nil).AllocRegions), allocType, offset, size)
}

// AllocationsConflict mocks base method.
func (m *MockGranularityCheck) AllocationsConflict(firstAllocType, secondAllocType uint32) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocationsConflict", firstAllocType, secondAllocType)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllocationsConflict indicates an expected call of AllocationsConflict.
func (mr *MockGranularityCheckMockRecorder) AllocationsConflict(firstAllocType, secondAllocType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocationsConflict", reflect.TypeOf((*MockGranularityCheck)(nil).AllocationsConflict), firstAllocType, secondAllocType)
}

// CheckConflictAndAlignUp mocks base method.
func (m *MockGranularityCheck) CheckConflictAndAlignUp(allocOffset, allocSize, regionOffset, regionSize int, allocType uint32) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckConflictAndAlignUp", allocOffset, allocSize, regionOffset, regionSize, allocType)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// CheckConflictAndAlignUp indicates an expected call of CheckConflictAndAlignUp.
func (mr *MockGranularityCheckMockRecorder) CheckConflictAndAlignUp(allocOffset, allocSize, regionOffset, regionSize, allocType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConflictAndAlignUp", reflect.TypeOf((*MockGranularityCheck)(nil).CheckConflictAndAlignUp), allocOffset, allocSize, regionOffset, regionSize, allocType)
}

// Clear mocks base method.
func (m *MockGranularityCheck) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockGranularityCheckMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockGranularityCheck)(nil).Clear))
}

// FinishValidation mocks base method.
func (m *MockGranularityCheck) FinishValidation(ctx any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishValidation", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishValidation indicates an expected call of FinishValidation.
func (mr *MockGranularityCheckMockRecorder) FinishValidation(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishValidation", reflect.TypeOf((*MockGranularityCheck)(nil).FinishValidation), ctx)
}

// FreeRegions mocks base method.
func (m *MockGranularityCheck) FreeRegions(offset, size int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FreeRegions", offset, size)
}

// FreeRegions indicates an expected call of FreeRegions.
func (mr *MockGranularityCheckMockRecorder) FreeRegions(offset, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeRegions", reflect.TypeOf((*MockGranularityCheck)(nil).FreeRegions), offset, size)
}

// RoundUpAllocRequest mocks base method.
func (m *MockGranularityCheck) RoundUpAllocRequest(allocType uint32, allocSize int, allocAlignment uint) (int, uint) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoundUpAllocRequest", allocType, allocSize, allocAlignment)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(uint)
	return ret0, ret1
}

// RoundUpAllocRequest indicates an expected call of RoundUpAllocRequest.
func (mr *MockGranularityCheckMockRecorder) RoundUpAllocRequest(allocType, allocSize, allocAlignment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoundUpAllocRequest", reflect.TypeOf((*MockGranularityCheck)(nil).RoundUpAllocRequest), allocType, allocSize, allocAlignment)
}

// StartValidation mocks base method.
func (m *MockGranularityCheck) StartValidation() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartValidation")
	ret0, _ := ret[0].(any)
	return ret0
}

// StartValidation indicates an expected call of StartValidation.
func (mr *MockGranularityCheckMockRecorder) StartValidation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartValidation", reflect.TypeOf((*MockGranularityCheck)(nil).StartValidation))
}

// Validate mocks base method.
func (m *MockGranularityCheck) Validate(ctx any, offset, size int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, offset, size)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockGranularityCheckMockRecorder) Validate(ctx, offset, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockGranularityCheck)(nil).Validate), ctx, offset, size)
}
