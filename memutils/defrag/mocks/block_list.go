// Code generated by MockGen. DO NOT EDIT.
// Source: block_list.go
//
// Generated by this command:
//
//	mockgen -source block_list.go -destination ./mocks/block_list.go
//

// Package mock_defrag is a generated GoMock package.
package mock_defrag

import (
	reflect "reflect"

	memutils "github.com/vkngwrapper/arsenal/memutils"
	defrag "github.com/vkngwrapper/arsenal/memutils/defrag"
	metadata "github.com/vkngwrapper/arsenal/memutils/metadata"
	common "github.com/vkngwrapper/core/v2/common"
	gomock "go.uber.org/mock/gomock"
)

// MockBlockList is a mock of BlockList interface.
type MockBlockList[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockBlockListMockRecorder[T]
	isgomock struct{}
}

// MockBlockListMockRecorder is the mock recorder for MockBlockList.
type MockBlockListMockRecorder[T any] struct {
	mock *MockBlockList[T]
}

// NewMockBlockList creates a new mock instance.
func NewMockBlockList[T any](ctrl *gomock.Controller) *MockBlockList[T] {
	mock := &MockBlockList[T]{ctrl: ctrl}
	mock.recorder = &MockBlockListMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockList[T]) EXPECT() *MockBlockListMockRecorder[T] {
	return m.recorder
}

// AddStatistics mocks base method.
func (m *MockBlockList[T]) AddStatistics(stats *memutils.Statistics) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddStatistics", stats)
}

// AddStatistics indicates an expected call of AddStatistics.
func (mr *MockBlockListMockRecorder[T]) AddStatistics(stats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStatistics", reflect.TypeOf((*MockBlockList[T])(nil).AddStatistics), stats)
}

// BlockCount mocks base method.
func (m *MockBlockList[T]) BlockCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// BlockCount indicates an expected call of BlockCount.
func (mr *MockBlockListMockRecorder[T]) BlockCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockCount", reflect.TypeOf((*MockBlockList[T])(nil).BlockCount))
}

// BufferImageGranularity mocks base method.
func (m *MockBlockList[T]) BufferImageGranularity() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BufferImageGranularity")
	ret0, _ := ret[0].(int)
	return ret0
}

// BufferImageGranularity indicates an expected call of BufferImageGranularity.
func (mr *MockBlockListMockRecorder[T]) BufferImageGranularity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BufferImageGranularity", reflect.TypeOf((*MockBlockList[T])(nil).BufferImageGranularity))
}

// CommitDefragAllocationRequest mocks base method.
func (m *MockBlockList[T]) CommitDefragAllocationRequest(allocRequest metadata.AllocationRequest, blockIndex int, alignment uint, flags uint32, userData any, suballocType uint32, outAlloc *T) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitDefragAllocationRequest", allocRequest, blockIndex, alignment, flags, userData, suballocType, outAlloc)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitDefragAllocationRequest indicates an expected call of CommitDefragAllocationRequest.
func (mr *MockBlockListMockRecorder[T]) CommitDefragAllocationRequest(allocRequest, blockIndex, alignment, flags, userData, suballocType, outAlloc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitDefragAllocationRequest", reflect.TypeOf((*MockBlockList[T])(nil).CommitDefragAllocationRequest), allocRequest, blockIndex, alignment, flags, userData, suballocType, outAlloc)
}

// CreateAlloc mocks base method.
func (m *MockBlockList[T]) CreateAlloc() *T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlloc")
	ret0, _ := ret[0].(*T)
	return ret0
}

// CreateAlloc indicates an expected call of CreateAlloc.
func (mr *MockBlockListMockRecorder[T]) CreateAlloc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlloc", reflect.TypeOf((*MockBlockList[T])(nil).CreateAlloc))
}

// Lock mocks base method.
func (m *MockBlockList[T]) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock.
func (mr *MockBlockListMockRecorder[T]) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockBlockList[T])(nil).Lock))
}

// MetadataForBlock mocks base method.
func (m *MockBlockList[T]) MetadataForBlock(index int) metadata.BlockMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetadataForBlock", index)
	ret0, _ := ret[0].(metadata.BlockMetadata)
	return ret0
}

// MetadataForBlock indicates an expected call of MetadataForBlock.
func (mr *MockBlockListMockRecorder[T]) MetadataForBlock(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetadataForBlock", reflect.TypeOf((*MockBlockList[T])(nil).MetadataForBlock), index)
}

// MoveDataForUserData mocks base method.
func (m *MockBlockList[T]) MoveDataForUserData(userData any) defrag.MoveAllocationData[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveDataForUserData", userData)
	ret0, _ := ret[0].(defrag.MoveAllocationData[T])
	return ret0
}

// MoveDataForUserData indicates an expected call of MoveDataForUserData.
func (mr *MockBlockListMockRecorder[T]) MoveDataForUserData(userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveDataForUserData", reflect.TypeOf((*MockBlockList[T])(nil).MoveDataForUserData), userData)
}

// SwapBlocks mocks base method.
func (m *MockBlockList[T]) SwapBlocks(leftIndex, rightIndex int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SwapBlocks", leftIndex, rightIndex)
}

// SwapBlocks indicates an expected call of SwapBlocks.
func (mr *MockBlockListMockRecorder[T]) SwapBlocks(leftIndex, rightIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapBlocks", reflect.TypeOf((*MockBlockList[T])(nil).SwapBlocks), leftIndex, rightIndex)
}

// Unlock mocks base method.
func (m *MockBlockList[T]) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock.
func (mr *MockBlockListMockRecorder[T]) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockBlockList[T])(nil).Unlock))
}
